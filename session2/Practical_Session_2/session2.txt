********************************************************************************
********* Practical Session 2: Datamining For Big Data *************************
********************************************************************************

You need to complete this file with your answers and upload it in the 
"Big Data" course on Moodle.

Do not modify or remove lines starting with stars "****". I use them to extract your name and answers.
Write your answers only between lines "******* answer X.X" and "******* end answer X.X".

****** Fill in your name on the next line  (do not modify or remove this line)
MAILLARD William
****** end name (do not modify or remove this line)


The aim of this session is to practice with the spark framework.
You will use the interactive pyspark shell.

********************************************************************************
************************* IMPORTANT ******************************************** 
********************************************************************************

For the next questions, you have to copy in this file the code that you
type in the interactive shell between the lines "******* answer x.x" and
"******* end answer x.x".  Do not modify or remove these two lines (they
are used to automatically extract your answers).
********************************************************************************

********************************************************************************
*************** Part III
********************************************************************************

In parts I and II, we used the following operations on RDD: map,
flatmap, reduceByKey, filter, take, collect, sortBy

In this part, you may also need operations union(), distinct() and intersection().
(see the documentations on RDD, the links are in the instructions.pdf document).


 In this part you will use the files A.txt and B.txt that are
 sets/multisets of integers (one integer per line).  The aim of this part
 is to compute operations (union, intersection,...) on sets or multi-sets
 using Spark.

 The result RDD for each question must be a list of integers.

 In questions 1 and 2, we consider that we are working on sets.
 This means that each element should appear at most once in the result.

1) Compute the union of A and B (First, you need to build RDDs for sets A
   and B), recall that each element must appear at most once.
******* answer 3.1
   A = sc.textFile("data/A.txt").map(lambda n: int(n)).distinct()
   B = sc.textFile("data/B.txt").map(lambda n: int(n)).distinct()
   C = A.union(B).distinct()
******* end answer 3.1

2) Compute the intersection of A and B:
******* answer 3.2
   D = A.intersection(B).distinct()
******* end answer 3.2


 We can define all these operations on multisets also. A multiset is a set
 where an element can appears several times.

3) Union (if an element appear a times in A and b times in B, it must
   appear a+b times in the union)
******* answer 3.3
    A = sc.textFile("data/A.txt").map(lambda n: int(n))
    B = sc.textFile("data/B.txt").map(lambda n: int(n))
    C = A.union(B)
******* end answer 3.3


For the following, it may be interesting to buid an intermediate RDD "sets"
that contains elements of the form (el, (a,b)) where "el" is an element of
the multi-set, "a" its number of occurrences in A and "b" its number of
occurrences in B. For instance, it will contain (1, (2, 5)) meaning that
"1" appears 2 times in A and 5 times in B.

And then, compute the result RDD of the following questions from "sets"
RDDs.

Recall that the final output RDD of each question must be a RDD of
integers, not of (el, (a,b)).


4) Intersection (if an element appear a times in A and b times in B, it
   must appear min(a,b) times in the intersection). 
******* answer 3.4
   A2 = A.map(lambda el: (el, 1)).reduceByKey(lambda x,y: x+y)
   B2 = B.map(lambda el: (el, 1)).reduceByKey(lambda x,y: x+y)
   I = A2.join(B2).map(lambda el: (el[0], el[1][0]) if el[1][0] < el[1][1] else (el[0], el[1][1]))
******* end answer 3.4


5) Difference (if an element appear a times in A and b times in B, it must
   appear max(0,a-b) times in the difference)
******* answer 3.5
    def diff(el):
      res = el[1][0] - el[1][1]
      return (el[0], res) if res > 0 else (el[0], 0)

    
    C2 = A2.join(B2)
    D2 = C2.map(diff)

******* end answer 3.5

6) Symmetric difference (if an element appear a times in A and b times in
   B, it must appear max(a,b) - min(a,b) in the symmetric difference)
******* answer 3.6
   E2 = C2.map(lambda el: (el[0], el[1][0] - el[1][1]) if el[1][0] > el[1][1] else (el[0], el[1][1] - el[1][0]))
******* end answer 3.6



********************************************************************************
*********** Part IV: Matrix Operations
********************************************************************************

In this part, you will compute several operations on matrix / vectors.

Some definitions:
- The sum of two vectors V = (V1,...,Vn) and W = (W1,...,Wn) is the vector
  V+W =(V1+W1, V2+W2, ..., Vn+Wn) 

- The dot product of two vectors V = (V1,...,Vn) and W = (W1,...,Wn) is:
  V.W =  V1*W1 + V2*W2 + ... + Vn*Wn 

- The L2 norm of a vector V is:
  norm(V) = sqrt(V.V) = sqrt( V1*V1 + V2*V2 + ... + Vn*Vn)

- The product of a matrix M and a vector V is:
  W = M.V with Wi = M[i,.] * V = sum_j M[i,j].Vj
  (the ith component of W is the dot product between the ith row of M and V).

******* Sparse representation of matrix and vectors ********************

Examples of matrix and vectors are stored in files M.txt, V.txt and W.txt (in data/ directory).
They use a sparse coding.
For a vector X (like V and W), it means that each line of X.txt has the form:
"i X[i]"
where i is the row number and X[i] the value of X in at row i.
For instance, if X is vector [0, 1.3, 0, 2, 4, 0, 0, 1.1], it is represented by a file:
"2 1.3
4 2
5 4
8 1.1"

We want to represent this vector by a RDD consisting of pairs (i,X[i]), so
X would be represented by a RDD :
[(2, 1.3), (4, 2.0), (5, 4.0),...]

Notice that a vector with more 0s at the end like [0, 1.3, 0, 2, 4, 0, 0, 1.1, 0, 0, 0, 0]
have exactly the same representation (since we only store non-zero values). 

For a matrix, each line of M.txt has the form:
"i j M[i,j]"
where i is the row number, j the column number and M[i,j] the value in matrix M at row i column j.
Only the non zero values M[i,j] are stored in the file.

For instance, if M is the 3x3 matrix: 
    0   5.3 0
M = 6.2 0   0
    0   0   0
it can be represented by a file with two lines (since there are only two non-zero values):
"1 2 5.3
2 1 6.2"
And the corresponding RDD would be
[(1, 2, 5.3), (2, 1, 6.2)]...  


******** Questions ****************************************************

1) First, construct three RDDs V, W and M that represent vectors of the
files V.txt and W.txt and the matrix in M.txt using the sparse
representation explained above. These three RDDs will be used in the
other questions.

hint: you can use the int() and float() functions: int("5") is the integer
5 and float("5.4") is the float value 5.4.
******* answer 4.1: do not modify or remove this line
def prase_line(l):
  c, v = l.split()
  c, v = int(c), float(v)
  return (c, v)

V = sc.textFile("data/V.txt").map(prase_line)
W = sc.textFile("data/W.txt").map(prase_line)

def parse_line2(l):
  r, c, v = l.split()
  return (int(r), int(c), float(v))
  
M = sc.textFile("data/M.txt").map(parse_line2)

******* end answer 4.1: do not modify or remove this line


2) The L2 norm of a vector V is norm(V) = sqrt(V1*V1 + V2*V2 + ... +Vn*Vn)
Compute the L2 norm of V from the RDD V.
To use the sqrt function, you need to import it using (in the pyspark shell):
from math import sqrt
******* answer 4.2: do not modify or remove this line
V_norm = sqrt(V.map(lambda el: el[1]*el[1]).reduce(lambda a,b: a+b))
******* end answer 4.2: do not modify or remove this line


3) We want to compute the vector sum U = V + W.  The vector U must be a RDD
using the sparse representation.  In particular, if some coordinate of U is
zero, it should not appear in the RDD (hint: filter operation).

******* answer 4.3: do not modify or remove this line
def sum2(el):
   a = el[1][0]
   a = a if a is not None else 0
   b = el[1][1]
   b = b if b is not None else 0
   return (el[0], a+b)


U = V.fullOuterJoin(W).map(sum2).filter(lambda el: el[1] > 0)
******* end answer 4.3: do not modify or remove this line
